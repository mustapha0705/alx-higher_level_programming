#!/usr/bin/python3
"""
This is the test file for the matrix_divided function.
"""

import unittest
from matrix_divided import matrix_divided

class TestMatrixDivided(unittest.TestCase):
    """
    Test cases for the matrix_divided function.
    """

    def test_matrix_divided(self):
        """
        Test matrix_divided function.
        """

        # Test case 1
        matrix1 = [
            [1, 2, 3],
            [4, 5, 6]
        ]
        self.assertEqual(matrix_divided(matrix1, 3), [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]])

        # Test case 2
        matrix2 = [
            [10, 20],
            [30, 40],
            [50, 60]
        ]
        self.assertEqual(matrix_divided(matrix2, 2), [[5.0, 10.0], [15.0, 20.0], [25.0, 30.0]])

        # Test case 3: Matrix with all elements as 0
        matrix3 = [
            [0, 0],
            [0, 0]
        ]
        self.assertEqual(matrix_divided(matrix3, 1), [[0.0, 0.0], [0.0, 0.0]])

        # Test case 4: Division by 0
        with self.assertRaises(ZeroDivisionError) as e:
            matrix_divided(matrix1, 0)
        self.assertEqual(str(e.exception), "division by zero")

        # Test case 5: Invalid matrix input
        with self.assertRaises(TypeError) as e:
            matrix_divided([[1, 2], [3, 4], "invalid"], 2)
        self.assertEqual(str(e.exception), "matrix must be a matrix (list of lists) of integers/floats")

        # Test case 6: Rows with different sizes
        with self.assertRaises(TypeError) as e:
            matrix_divided([[1, 2, 3], [4, 5]], 2)
        self.assertEqual(str(e.exception), "Each row of the matrix must have the same size")

        # Test case 7: Non-numeric div input
        with self.assertRaises(TypeError) as e:
            matrix_divided(matrix1, "string")
        self.assertEqual(str(e.exception), "div must be a number")

if __name__ == '__main__':
    unittest.main()
